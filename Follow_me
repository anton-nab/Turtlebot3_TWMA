import rclpy
from rclpy.node import Node

from sensor_msgs.msg import LaserScan

ScanAnyDegree = []
Targets = []

NbTargetMax = 7
SizeTarget = 2
DegreeToTargetRaw = 40

CalculatedDegreeToTarget = DegreeToTargetRaw - SizeTarget 



class FollowMe(Node):

    def __init__(self):
        super().__init__('FollowMe')

        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)

        self.subscription = self.create_subscription(
            LaserScan,
            'scan',
            self.listener_callback,
            10)

    
    def listener_callback(self, msg):
        self.get_logger().info('I heard: "%s"' % msg.data)


# Permet le d√©placement du robot

def Move(Data):
    #TODO
    return Data

def Unmove(args=None):
    #TODO
    return 0


# Sauvegarde les valeurs du Lydar dans le tableau Targets

def SaveValueScan(args=None):
    #TODO
    return 0


# Algorythme du "Follow me"

def TargetSaver(i):

    TargetMoy = (ScanAnyDegree[i] + ScanAnyDegree[i+1] + ScanAnyDegree[i+2] + ScanAnyDegree[i+3]) / 4

    if(1,5 < TargetMoy < 2):

        Targets += [TargetMoy, i+1]

    return 0
        
def TargetIdentifier(i):

    validation = 0

    for j in [1, 2] : 

        if ScanAnyDegree[i+j] > ScanAnyDegree[i] + 0.30 | ScanAnyDegree[i+j] < ScanAnyDegree[i] - 0.30:

            break

        validation = validation + 1 

    return validation

def TargetCentral(args=None):
    
    for i in range(CalculatedDegreeToTarget) :

        validation = TargetIdentifier(i)
        
        if validation == 2 :

            TargetSaver()

def ReachTarget(args=None):

    NbTarget = len(Targets)
    
    if NbTarget > NbTargetMax | NbTarget == 0 :

        Unmove()
    
    elif NbTarget > 1 :

        mem = 10

        for _ in range(NbTarget - 1) :

            if Targets[_][0] < mem :

                mem = _

        Move(Targets[mem])

    elif NbTarget == 1 :

        Move(Targets[0])





def main(args=None):
    rclpy.init(args=args)

    follow_me = FollowMe()

    rclpy.spin(follow_me)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    follow_me.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
